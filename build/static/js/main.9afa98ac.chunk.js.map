{"version":3,"sources":["components/GuessRow/GuessRow.module.css","components/ColorPicker/ColorPicker.module.css","components/GuessPeg/GuessPeg.module.css","components/ScoreButton/ScoreButton.module.css","components/GameBoard/GameBoard.module.css","components/GameTimer/GameTimer.module.css","components/GuessPeg/GuessPeg.jsx","components/GuessPegs/GuessPegs.jsx","components/GuessScore/GuessScore.jsx","components/ScoreButton/ScoreButton.jsx","components/GuessRow/GuessRow.jsx","components/GameBoard/GameBoard.jsx","components/ColorPicker/ColorPicker.jsx","components/GameTimer/GameTimer.jsx","components/NewGameButton/NewGameButton.jsx","pages/GamePage/GamePage.jsx","pages/SettingsPage/SettingsPage.jsx","pages/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","GuessPeg","props","className","styles","peg","style","backgroundColor","color","border","cursor","currentGuess","onClick","handlePegClick","GuessPegs","colors","code","GuessScore","score","scores","repeat","perfect","almost","split","baseStyle","width","height","margin","borderRadius","pegStyles","borderColor","map","idx","key","ScoreButton","button","disabled","handleScoreClick","GuessRow","rowNum","rowIdx","guess","includes","GameBoard","guesses","length","ColorPicker","selColorIdx","handleColorSelection","GameTimer","handleTick","isTiming","handleTimerUpdate","this","timerId","setInterval","clearInterval","seconds","mins","Math","floor","toString","padStart","secs","formatTime","elapsedTime","Component","NewGameButton","handleNewGameClick","GamePage","to","winTries","SettingsPage","selectedLevelStyle","levels","Object","keys","colorsLookup","level","difficulty","handleDifficultyChange","history","push","Easy","Moderate","Difficult","App","setState","curState","colorIdx","getInitialState","pegIdx","currentGuessIdx","state","guessesCopy","guessCopy","codeCopy","guessCodeCopy","secretCodeCopy","forEach","foundIdx","indexOf","scoreCopy","getNewGuess","genCode","numColors","Array","fill","dummy","random","lastGuess","getWinTries","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9afa98ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GuessRow\":\"GuessRow_GuessRow__2xB0Q\",\"rowNum\":\"GuessRow_rowNum__2MfpL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColorPicker\":\"ColorPicker_ColorPicker__2MEvt\",\"button\":\"ColorPicker_button__2D9S8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"peg\":\"GuessPeg_peg__1qANj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ScoreButton_button__2ZFt3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard_GameBoard__2sC3L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameTimer\":\"GameTimer_GameTimer__PY19_\"};","import React from 'react';\nimport styles from './GuessPeg.module.css';\n\nconst GuessPeg = (props) => (\n  <div\n    className={styles.peg}\n    style={{\n      backgroundColor: props.color,\n      border: props.color ? `1px solid ${props.color}`: '1px dashed grey',\n      cursor: props.currentGuess && 'pointer'\n    }}\n    onClick={props.currentGuess ? props.handlePegClick : null}\n  />\n);\n\nexport default GuessPeg;\n","import React from 'react';\nimport GuessPeg from '../GuessPeg/GuessPeg';\nimport './GuessPegs.css';\n\nconst GuessPegs = (props) => (\n  <div className='GuessPegs'>\n    <GuessPeg\n      color={props.colors[props.code[0]]}\n      currentGuess={props.currentGuess}\n      handlePegClick={() => props.handlePegClick(0)}\n    />\n    <GuessPeg\n      color={props.colors[props.code[1]]}\n      currentGuess={props.currentGuess}\n      handlePegClick={() => props.handlePegClick(1)}\n    />\n    <GuessPeg\n      color={props.colors[props.code[2]]}\n      currentGuess={props.currentGuess}\n      handlePegClick={() => props.handlePegClick(2)}\n    />\n    <GuessPeg\n      color={props.colors[props.code[3]]}\n      currentGuess={props.currentGuess}\n      handlePegClick={() => props.handlePegClick(3)}\n    />\n  </div>\n);\n\nexport default GuessPegs;\n","import React from 'react';\nimport './GuessScore.css';\n\nconst GuessScore = ({ score }) => {\n  let scores = ('P'.repeat(score.perfect) + 'A'.repeat(score.almost) +\n    'I'.repeat(4 - score.perfect - score.almost)).split('');\n  \n  let baseStyle = {\n    width: 10,\n    height: 10,\n    margin: 1,\n    border: '2px solid',\n    borderRadius: '50%'\n  };\n\n  let pegStyles = {\n    'P': {\n      borderColor: 'black',\n      backgroundColor: 'black'\n    },\n    'A': {\n      borderColor: 'black',\n      backgroundColor: 'white'\n    },\n    'I': {\n      borderColor: 'white',\n      backgroundColor: 'lightgrey'\n    }\n  };\n  \n  return (\n    <div className='GuessScore'>\n      {scores.map((score, idx) =>\n        <div\n          key={idx}\n          style={{...baseStyle, ...pegStyles[score]}} />\n      )}\n    </div>\n  );\n}\n\nexport default GuessScore;\n","import React from 'react';\nimport styles from './ScoreButton.module.css';\n\nconst ScoreButton = (props) => (\n  <button\n    className={`${styles.button} btn btn-default`}\n    disabled={props.disabled}\n    onClick={props.handleScoreClick}\n  >\n    ✔\n  </button>\n);\n\nexport default ScoreButton;\n","import React from 'react';\nimport GuessPegs from '../GuessPegs/GuessPegs';\nimport GuessScore from '../GuessScore/GuessScore';\nimport ScoreButton from '../ScoreButton/ScoreButton';\nimport styles from './GuessRow.module.css';\n\nconst GuessRow = (props) => (\n  <div className={styles.GuessRow}>\n    <div\n      className={styles.rowNum}\n      style={{color: props.currentGuess ? 'black' : 'lightgrey'}}\n    >\n      {props.rowIdx + 1}\n    </div>\n    <GuessPegs\n      colors={props.colors}\n      code={props.guess.code}\n      currentGuess={props.currentGuess}\n      handlePegClick={props.handlePegClick}\n    />\n    {\n      props.currentGuess && props.guess.score.perfect !== 4 ?\n        <ScoreButton\n          disabled={props.guess.code.includes(null)}\n          handleScoreClick={props.handleScoreClick}\n        /> :\n        <GuessScore score={props.guess.score} />\n    }\n  </div>\n);\n\nexport default GuessRow;\n","import React from 'react';\nimport GuessRow from '../GuessRow/GuessRow';\nimport styles from './GameBoard.module.css';\n\nconst GameBoard = (props) => (\n  <div className={styles.GameBoard}>\n    {props.guesses.map((guess, idx) =>\n      <GuessRow\n        guess={guess}\n        colors={props.colors}\n        rowIdx={idx}\n        currentGuess={idx === (props.guesses.length - 1)}\n        handlePegClick={props.handlePegClick}\n        handleScoreClick={props.handleScoreClick}\n        key={idx}\n      />\n    )}\n  </div>\n);\n\nexport default GameBoard;\n","import React from 'react';\nimport styles from './ColorPicker.module.css';\n\nconst ColorPicker = (props) => (\n  <div className={styles.ColorPicker}>\n    {props.colors.map((color, idx) =>\n      <button\n        key={color}\n        className={styles.button}\n        style={{\n          backgroundColor: props.selColorIdx === idx ? 'white' : color,\n          borderColor: color\n        }}\n        onClick={() => props.handleColorSelection(idx)}\n      />\n    )}\n  </div>\n);\n\nexport default ColorPicker;\n","import React, { Component } from 'react';\nimport styles from './GameTimer.module.css';\n\nfunction formatTime(seconds) {\n  let mins = Math.floor(seconds / 60).toString().padStart(2, '0');\n  let secs = (seconds % 60).toString().padStart(2, '0');\n  return `${mins}:${secs}`;\n}\n\nclass GameTimer extends Component {\n\n  handleTick = () => {\n    // Ignore ticks?\n    if (!this.props.isTiming) return;\n    this.props.handleTimerUpdate();\n  };\n\n  /*--- Lifecycle Methods ---*/\n\n  componentDidMount() {\n    this.timerId = setInterval(this.handleTick, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    return (\n      <div className={`${styles.GameTimer} flex-h`}>\n        {formatTime(this.props.elapsedTime)}\n      </div>\n    );\n  }\n}\n\nexport default GameTimer;\n","import React from 'react';\n\nconst NewGameButton = (props) => (\n  <button\n    className='btn btn-default'\n    onClick={props.handleNewGameClick}\n  >\n    New Game\n  </button>\n);\n\nexport default NewGameButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport GameBoard from '../../components/GameBoard/GameBoard';\nimport ColorPicker from '../../components/ColorPicker/ColorPicker';\nimport GameTimer from '../../components/GameTimer/GameTimer';\nimport NewGameButton from '../../components/NewGameButton/NewGameButton';\nimport './GamePage.css';\n\nconst GamePage = (props) => {\n  return (\n    <div className=\"GamePage\">\n      <div className=\"flex-h align-flex-end\">\n        <GameBoard\n          colors={props.colors}\n          guesses={props.guesses}\n          handlePegClick={props.handlePegClick}\n          handleScoreClick={props.handleScoreClick}\n        />\n        <div className='GamePage-controls'>\n          <ColorPicker\n            colors={props.colors}\n            selColorIdx={props.selColorIdx}\n            handleColorSelection={props.handleColorSelection}\n          />\n          <GameTimer\n            elapsedTime={props.elapsedTime}\n            handleTimerUpdate={props.handleTimerUpdate}\n            isTiming={props.isTiming}\n          />\n          <Link className='btn btn-default GamePage-link-margin' to='/settings'>Difficulty</Link>\n          <NewGameButton handleNewGameClick={props.handleNewGameClick}/>\n        </div>\n      </div>\n      <footer className='header-footer'>\n        {(props.winTries ? `You Won in ${props.winTries} Guesses!` : 'Good Luck!')}\n      </footer>\n    </div>\n  );\n\n};\n\nexport default GamePage;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './SettingsPage.css';\n\nconst SettingsPage = (props) => {\n\n  const selectedLevelStyle = {\n    border: '2px solid #333'\n  };\n\n  function handleDifficultyChange(level) {\n    props.handleDifficultyChange(level);\n    props.history.push('/');\n  }\n\n  const colorKeys = Object.keys(props.colorsLookup);\n\n  const levels = colorKeys.map(level => (\n    <div className='Settings-level-row' key={level}>\n      <button className=\"Settings-level-btn btn btn-default\"\n        style={level === props.difficulty ? selectedLevelStyle : null}\n        disabled={level === props.difficulty}\n        onClick={() => handleDifficultyChange(level)}\n      >\n        {level}\n      </button>\n      <div className='Settings-level-colors'>\n        {props.colorsLookup[level].map(color => \n          <div\n            className='Settings-color'\n            style={{backgroundColor: color}}\n            key={color}\n          />\n        )}\n      </div>\n    </div>\n  ));\n\n  return (\n    <div className='Settings'>\n      <header className='header-footer'>Set Difficulty Level</header>\n      <div>\n        {levels}\n      </div>\n      <div>\n        <Link className='Settings-cancel btn btn-default btn-sm' to='/'>Cancel</Link>\n      </div>\n    </div>\n  );\n\n};\n\nexport default SettingsPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport GamePage from '../../pages/GamePage/GamePage';\nimport { Route, Switch } from 'react-router-dom';\nimport SettingsPage from '../SettingsPage/SettingsPage';\n\nconst colors = {\n  Easy: ['#7CCCE5', '#FDE47F', '#E04644', '#B576AD'],\n  Moderate: ['#7CCCE5', '#FDE47F', '#E04644', '#B576AD', '#B7D968'],\n  Difficult: ['#7CCCE5', '#FDE47F', '#E04644', '#B576AD', '#B7D968', '#555E7B']\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {...this.getInitialState(), difficulty: 'Easy'};\n  }\n\n  getInitialState() {\n    return {\n      selColorIdx: 0,\n      guesses: [this.getNewGuess()],\n      code: this.genCode(),\n      // new state coming in!\n      elapsedTime: 0,\n      isTiming: true\n    };\n  }\n\n  getNewGuess() {\n    return {\n      code: [null, null, null, null],\n      score: {\n        perfect: 0,\n        almost: 0\n      }\n    };\n  }\n\n  genCode() {\n    let numColors = this.state && colors[this.state.difficulty].length;\n    numColors = numColors || 4;\n    return new Array(4).fill().map(dummy => Math.floor(Math.random() * numColors));\n  }\n\n  getWinTries() {\n    // if winner, return num guesses, otherwise 0 (no winner)\n    let lastGuess = this.state.guesses.length - 1;\n    return this.state.guesses[lastGuess].score.perfect === 4 ? lastGuess + 1 : 0;\n  }\n\n  handleTimerUpdate = () => {\n    this.setState((curState) => ({elapsedTime: ++curState.elapsedTime}));\n  }\n\n  handleDifficultyChange = (level) => {\n    // Use callback to ensure level is updated BEFORE calling handleNewGameClick\n    this.setState({difficulty: level}, () => this.handleNewGameClick());\n  }\n  \n  handleColorSelection = (colorIdx) => {\n    this.setState({selColorIdx: colorIdx});\n  }\n\n  handleNewGameClick = () => {\n    this.setState(this.getInitialState());\n  }\n\n  handlePegClick = (pegIdx) => {\n    // Get index of last guess object\n    let currentGuessIdx = this.state.guesses.length - 1;\n\n    // Always replace objects/arrays with NEW ones\n    let guessesCopy = [...this.state.guesses];\n    let guessCopy = {...guessesCopy[currentGuessIdx]};\n    let codeCopy = [...guessCopy.code];\n\n    // Update the NEW code array with the currently selected color\n    codeCopy[pegIdx] = this.state.selColorIdx;\n\n    // Update the NEW guess object\n    guessCopy.code = codeCopy;\n\n    // Update the NEW guesses array\n    guessesCopy[currentGuessIdx] = guessCopy;\n\n    // Update state with the NEW guesses array\n    this.setState({\n        guesses: guessesCopy\n    });\n  }\n\n  handleScoreClick = () => {\n    // Need the index of the current guess object (last object in guesses array)\n    let currentGuessIdx = this.state.guesses.length - 1;\n\n    // Create \"working\" copies of the \"guessed\" code and the secret\n    // code so that we can modify them as we compute the number of\n    // perfect and almost without messing up the actual ones in state\n    let guessCodeCopy = [...this.state.guesses[currentGuessIdx].code];\n    let secretCodeCopy = [...this.state.code];\n\n    let perfect = 0, almost = 0;\n\n    // First pass computes number of \"perfect\"\n    guessCodeCopy.forEach((code, idx) => {\n      if (secretCodeCopy[idx] === code) {\n        perfect++;\n        // Ensure same choice is not matched again\n        // by updating both elements in the \"working\"\n        // arrays to null\n        guessCodeCopy[idx] = secretCodeCopy[idx] = null;\n      }\n    });\n\n    // Second pass computes number of \"almost\"\n    guessCodeCopy.forEach((code, idx) => {\n      if (code === null) return;\n      let foundIdx = secretCodeCopy.indexOf(code);\n      if (foundIdx > -1) {\n        almost++;\n        // Again, ensure same choice is not matched again\n        secretCodeCopy[foundIdx] = null;\n      }\n    });\n\n    // State must only be updated with NEW objects/arrays\n        // Always replace objects/arrays with NEW ones\n    let guessesCopy = [...this.state.guesses];\n    let guessCopy = {...guessesCopy[currentGuessIdx]};\n    let scoreCopy = {...guessCopy.score};\n\n    scoreCopy.perfect = perfect;\n    scoreCopy.almost = almost;\n    guessCopy.score = scoreCopy;\n    guessesCopy[currentGuessIdx] = guessCopy;\n\n    if (perfect !== 4) guessesCopy.push(this.getNewGuess());\n\n    this.setState({\n      guesses: guessesCopy,\n      // This is a great way to update isTiming\n      isTiming: perfect !== 4\n    });\n  }\n\n  render() {\n    let winTries = this.getWinTries();\n    return (\n      <div>\n        <header className='header-footer'>R E A C T &nbsp;&nbsp;&nbsp;  M A S T E R M I N D</header>\n        <Switch>\n          <Route exact path='/' render={() =>\n            <GamePage\n              winTries={winTries}\n              colors={colors[this.state.difficulty]}\n              selColorIdx={this.state.selColorIdx}\n              guesses={this.state.guesses}\n              elapsedTime={this.state.elapsedTime}\n              isTiming={this.state.isTiming}\n              handleColorSelection={this.handleColorSelection}\n              handleNewGameClick={this.handleNewGameClick}\n              handlePegClick={this.handlePegClick}\n              handleScoreClick={this.handleScoreClick}\n              handleTimerUpdate={this.handleTimerUpdate}\n            />\n          } />\n          <Route exact path='/settings' render={props => \n            <SettingsPage\n              {...props} \n              colorsLookup={colors}\n              difficulty={this.state.difficulty}\n              handleDifficultyChange={this.handleDifficultyChange}\n            />\n          } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App /></Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}